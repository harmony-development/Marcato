// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: harmonytypes/v1/types.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// Metadata for methods. These are set in individual RPC endpoints and are
/// typically used by servers.
struct Protocol_Harmonytypes_V1_HarmonyMethodMetadata {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// whether the method requires authentication.
  var requiresAuthentication: Bool = false

  /// whether the method allows federation or not.
  var requiresLocal: Bool = false

  /// the permission nodes required to invoke the method.
  var requiresPermissionNode: String = String()

  /// whether the method requires owner
  var requiresOwner: Bool = false

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// Anything holds anything
struct Protocol_Harmonytypes_V1_Anything {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Kind is the kind of the message
  var kind: String = String()

  /// Body is the serialised bytes
  var body: Data = Data()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// Metadata type used by many messages.
struct Protocol_Harmonytypes_V1_Metadata {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Kind of this metadata.
  var kind: String = String()

  /// A map containing information.
  var `extension`: Dictionary<String,Protocol_Harmonytypes_V1_Anything> = [:]

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// Error type that will be returned by servers. 
struct Protocol_Harmonytypes_V1_Error {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// The identifier of this error, can be used as an i18n key.
  var identifier: String = String()

  /// A (usually english) human message for this error.
  var humanMessage: String = String()

  /// More details about this message. Is dependent on the endpoint.
  var moreDetails: Data = Data()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// Token that will be used for authentication.
struct Protocol_Harmonytypes_V1_Token {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Ed25519 signature of the following serialized protobuf data, signed
  /// with a private key. Which private key used to sign will be described
  /// in the documentation.
  ///
  /// Has to be 64 bytes long, otherwise it will be rejected.
  var sig: Data = Data()

  /// Serialized protobuf data.
  /// The protobuf type of this serialized data is dependent on the API endpoint
  /// used.
  var data: Data = Data()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// An empty message
struct Protocol_Harmonytypes_V1_Empty {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// An object representing an item position between two other items.
struct Protocol_Harmonytypes_V1_ItemPosition {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// The ID of the item the position is relative to
  var itemID: UInt64 = 0

  /// Whether the position is before or after the given ID
  var position: Protocol_Harmonytypes_V1_ItemPosition.Position = .beforeUnspecified

  var unknownFields = SwiftProtobuf.UnknownStorage()

  /// The position
  enum Position: SwiftProtobuf.Enum {
    typealias RawValue = Int

    /// The position is before the item
    case beforeUnspecified // = 0

    /// The position is after the item
    case after // = 1
    case UNRECOGNIZED(Int)

    init() {
      self = .beforeUnspecified
    }

    init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .beforeUnspecified
      case 1: self = .after
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    var rawValue: Int {
      switch self {
      case .beforeUnspecified: return 0
      case .after: return 1
      case .UNRECOGNIZED(let i): return i
      }
    }

  }

  init() {}
}

#if swift(>=4.2)

extension Protocol_Harmonytypes_V1_ItemPosition.Position: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static var allCases: [Protocol_Harmonytypes_V1_ItemPosition.Position] = [
    .beforeUnspecified,
    .after,
  ]
}

#endif  // swift(>=4.2)

// MARK: - Extension support defined in types.proto.

// MARK: - Extension Properties

// Swift Extensions on the exteneded Messages to add easy access to the declared
// extension fields. The names are based on the extension field name from the proto
// declaration. To avoid naming collisions, the names are prefixed with the name of
// the scope where the extend directive occurs.

extension SwiftProtobuf.Google_Protobuf_MethodOptions {

  /// Harmony method metadata.
  var Protocol_Harmonytypes_V1_metadata: Protocol_Harmonytypes_V1_HarmonyMethodMetadata {
    get {return getExtensionValue(ext: Protocol_Harmonytypes_V1_Extensions_metadata) ?? Protocol_Harmonytypes_V1_HarmonyMethodMetadata()}
    set {setExtensionValue(ext: Protocol_Harmonytypes_V1_Extensions_metadata, value: newValue)}
  }
  /// Returns true if extension `Protocol_Harmonytypes_V1_Extensions_metadata`
  /// has been explicitly set.
  var hasProtocol_Harmonytypes_V1_metadata: Bool {
    return hasExtensionValue(ext: Protocol_Harmonytypes_V1_Extensions_metadata)
  }
  /// Clears the value of extension `Protocol_Harmonytypes_V1_Extensions_metadata`.
  /// Subsequent reads from it will return its default value.
  mutating func clearProtocol_Harmonytypes_V1_metadata() {
    clearExtensionValue(ext: Protocol_Harmonytypes_V1_Extensions_metadata)
  }

}

// MARK: - File's ExtensionMap: Protocol_Harmonytypes_V1_Types_Extensions

/// A `SwiftProtobuf.SimpleExtensionMap` that includes all of the extensions defined by
/// this .proto file. It can be used any place an `SwiftProtobuf.ExtensionMap` is needed
/// in parsing, or it can be combined with other `SwiftProtobuf.SimpleExtensionMap`s to create
/// a larger `SwiftProtobuf.SimpleExtensionMap`.
let Protocol_Harmonytypes_V1_Types_Extensions: SwiftProtobuf.SimpleExtensionMap = [
  Protocol_Harmonytypes_V1_Extensions_metadata
]

// Extension Objects - The only reason these might be needed is when manually
// constructing a `SimpleExtensionMap`, otherwise, use the above _Extension Properties_
// accessors for the extension fields on the messages directly.

/// Harmony method metadata.
let Protocol_Harmonytypes_V1_Extensions_metadata = SwiftProtobuf.MessageExtension<SwiftProtobuf.OptionalMessageExtensionField<Protocol_Harmonytypes_V1_HarmonyMethodMetadata>, SwiftProtobuf.Google_Protobuf_MethodOptions>(
  _protobuf_fieldNumber: 1091,
  fieldName: "protocol.harmonytypes.v1.metadata"
)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "protocol.harmonytypes.v1"

extension Protocol_Harmonytypes_V1_HarmonyMethodMetadata: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".HarmonyMethodMetadata"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "requires_authentication"),
    2: .standard(proto: "requires_local"),
    3: .standard(proto: "requires_permission_node"),
    4: .standard(proto: "requires_owner"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularBoolField(value: &self.requiresAuthentication) }()
      case 2: try { try decoder.decodeSingularBoolField(value: &self.requiresLocal) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.requiresPermissionNode) }()
      case 4: try { try decoder.decodeSingularBoolField(value: &self.requiresOwner) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.requiresAuthentication != false {
      try visitor.visitSingularBoolField(value: self.requiresAuthentication, fieldNumber: 1)
    }
    if self.requiresLocal != false {
      try visitor.visitSingularBoolField(value: self.requiresLocal, fieldNumber: 2)
    }
    if !self.requiresPermissionNode.isEmpty {
      try visitor.visitSingularStringField(value: self.requiresPermissionNode, fieldNumber: 3)
    }
    if self.requiresOwner != false {
      try visitor.visitSingularBoolField(value: self.requiresOwner, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Protocol_Harmonytypes_V1_HarmonyMethodMetadata, rhs: Protocol_Harmonytypes_V1_HarmonyMethodMetadata) -> Bool {
    if lhs.requiresAuthentication != rhs.requiresAuthentication {return false}
    if lhs.requiresLocal != rhs.requiresLocal {return false}
    if lhs.requiresPermissionNode != rhs.requiresPermissionNode {return false}
    if lhs.requiresOwner != rhs.requiresOwner {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Protocol_Harmonytypes_V1_Anything: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Anything"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "kind"),
    2: .same(proto: "body"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.kind) }()
      case 2: try { try decoder.decodeSingularBytesField(value: &self.body) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.kind.isEmpty {
      try visitor.visitSingularStringField(value: self.kind, fieldNumber: 1)
    }
    if !self.body.isEmpty {
      try visitor.visitSingularBytesField(value: self.body, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Protocol_Harmonytypes_V1_Anything, rhs: Protocol_Harmonytypes_V1_Anything) -> Bool {
    if lhs.kind != rhs.kind {return false}
    if lhs.body != rhs.body {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Protocol_Harmonytypes_V1_Metadata: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Metadata"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "kind"),
    2: .same(proto: "extension"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.kind) }()
      case 2: try { try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMessageMap<SwiftProtobuf.ProtobufString,Protocol_Harmonytypes_V1_Anything>.self, value: &self.`extension`) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.kind.isEmpty {
      try visitor.visitSingularStringField(value: self.kind, fieldNumber: 1)
    }
    if !self.`extension`.isEmpty {
      try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMessageMap<SwiftProtobuf.ProtobufString,Protocol_Harmonytypes_V1_Anything>.self, value: self.`extension`, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Protocol_Harmonytypes_V1_Metadata, rhs: Protocol_Harmonytypes_V1_Metadata) -> Bool {
    if lhs.kind != rhs.kind {return false}
    if lhs.`extension` != rhs.`extension` {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Protocol_Harmonytypes_V1_Error: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Error"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "identifier"),
    2: .standard(proto: "human_message"),
    3: .standard(proto: "more_details"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.identifier) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.humanMessage) }()
      case 3: try { try decoder.decodeSingularBytesField(value: &self.moreDetails) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.identifier.isEmpty {
      try visitor.visitSingularStringField(value: self.identifier, fieldNumber: 1)
    }
    if !self.humanMessage.isEmpty {
      try visitor.visitSingularStringField(value: self.humanMessage, fieldNumber: 2)
    }
    if !self.moreDetails.isEmpty {
      try visitor.visitSingularBytesField(value: self.moreDetails, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Protocol_Harmonytypes_V1_Error, rhs: Protocol_Harmonytypes_V1_Error) -> Bool {
    if lhs.identifier != rhs.identifier {return false}
    if lhs.humanMessage != rhs.humanMessage {return false}
    if lhs.moreDetails != rhs.moreDetails {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Protocol_Harmonytypes_V1_Token: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Token"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "sig"),
    2: .same(proto: "data"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularBytesField(value: &self.sig) }()
      case 2: try { try decoder.decodeSingularBytesField(value: &self.data) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.sig.isEmpty {
      try visitor.visitSingularBytesField(value: self.sig, fieldNumber: 1)
    }
    if !self.data.isEmpty {
      try visitor.visitSingularBytesField(value: self.data, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Protocol_Harmonytypes_V1_Token, rhs: Protocol_Harmonytypes_V1_Token) -> Bool {
    if lhs.sig != rhs.sig {return false}
    if lhs.data != rhs.data {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Protocol_Harmonytypes_V1_Empty: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Empty"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Protocol_Harmonytypes_V1_Empty, rhs: Protocol_Harmonytypes_V1_Empty) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Protocol_Harmonytypes_V1_ItemPosition: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ItemPosition"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "item_id"),
    2: .same(proto: "position"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularUInt64Field(value: &self.itemID) }()
      case 2: try { try decoder.decodeSingularEnumField(value: &self.position) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.itemID != 0 {
      try visitor.visitSingularUInt64Field(value: self.itemID, fieldNumber: 1)
    }
    if self.position != .beforeUnspecified {
      try visitor.visitSingularEnumField(value: self.position, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Protocol_Harmonytypes_V1_ItemPosition, rhs: Protocol_Harmonytypes_V1_ItemPosition) -> Bool {
    if lhs.itemID != rhs.itemID {return false}
    if lhs.position != rhs.position {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Protocol_Harmonytypes_V1_ItemPosition.Position: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "POSITION_BEFORE_UNSPECIFIED"),
    1: .same(proto: "POSITION_AFTER"),
  ]
}
