// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: profile/v1/types.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// The possible statuses a user can have.
enum Protocol_Profile_V1_UserStatus: SwiftProtobuf.Enum {
  typealias RawValue = Int

  /// User is offline (not connected to the server).
  case offlineUnspecified // = 0

  /// User is online (this is the default value if ommitted).
  case online // = 1

  /// User is away.
  case idle // = 2

  /// User does not want to be disturbed.
  case doNotDisturb // = 3

  /// User is on mobile.
  case mobile // = 4

  /// User is streaming
  case streaming // = 5
  case UNRECOGNIZED(Int)

  init() {
    self = .offlineUnspecified
  }

  init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .offlineUnspecified
    case 1: self = .online
    case 2: self = .idle
    case 3: self = .doNotDisturb
    case 4: self = .mobile
    case 5: self = .streaming
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  var rawValue: Int {
    switch self {
    case .offlineUnspecified: return 0
    case .online: return 1
    case .idle: return 2
    case .doNotDisturb: return 3
    case .mobile: return 4
    case .streaming: return 5
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension Protocol_Profile_V1_UserStatus: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static var allCases: [Protocol_Profile_V1_UserStatus] = [
    .offlineUnspecified,
    .online,
    .idle,
    .doNotDisturb,
    .mobile,
    .streaming,
  ]
}

#endif  // swift(>=4.2)

/// Data for a single profile, without the user's ID.
struct Protocol_Profile_V1_Profile {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// the name of the user.
  var userName: String = String()

  /// the user's avatar.
  var userAvatar: String {
    get {return _userAvatar ?? String()}
    set {_userAvatar = newValue}
  }
  /// Returns true if `userAvatar` has been explicitly set.
  var hasUserAvatar: Bool {return self._userAvatar != nil}
  /// Clears the value of `userAvatar`. Subsequent reads from it will return its default value.
  mutating func clearUserAvatar() {self._userAvatar = nil}

  /// the status of the user.
  var userStatus: Protocol_Profile_V1_UserStatus = .offlineUnspecified

  /// whether the user is a bot or not.
  var isBot: Bool = false

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _userAvatar: String? = nil
}

/// Used in `GetProfile` endpoint.
struct Protocol_Profile_V1_GetProfileRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// The id of the user to get.
  var userID: UInt64 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// Used in `GetProfile` endpoint.
struct Protocol_Profile_V1_GetProfileResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// The user's profile
  var profile: Protocol_Profile_V1_Profile {
    get {return _profile ?? Protocol_Profile_V1_Profile()}
    set {_profile = newValue}
  }
  /// Returns true if `profile` has been explicitly set.
  var hasProfile: Bool {return self._profile != nil}
  /// Clears the value of `profile`. Subsequent reads from it will return its default value.
  mutating func clearProfile() {self._profile = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _profile: Protocol_Profile_V1_Profile? = nil
}

/// Used in `UpdateProfile` endpoint.
struct Protocol_Profile_V1_UpdateProfileRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// new name of the user.
  var newUserName: String {
    get {return _newUserName ?? String()}
    set {_newUserName = newValue}
  }
  /// Returns true if `newUserName` has been explicitly set.
  var hasNewUserName: Bool {return self._newUserName != nil}
  /// Clears the value of `newUserName`. Subsequent reads from it will return its default value.
  mutating func clearNewUserName() {self._newUserName = nil}

  /// new user avatar. The avatar will be removed if the string is empty.
  var newUserAvatar: String {
    get {return _newUserAvatar ?? String()}
    set {_newUserAvatar = newValue}
  }
  /// Returns true if `newUserAvatar` has been explicitly set.
  var hasNewUserAvatar: Bool {return self._newUserAvatar != nil}
  /// Clears the value of `newUserAvatar`. Subsequent reads from it will return its default value.
  mutating func clearNewUserAvatar() {self._newUserAvatar = nil}

  /// new status of the user.
  var newUserStatus: Protocol_Profile_V1_UserStatus {
    get {return _newUserStatus ?? .offlineUnspecified}
    set {_newUserStatus = newValue}
  }
  /// Returns true if `newUserStatus` has been explicitly set.
  var hasNewUserStatus: Bool {return self._newUserStatus != nil}
  /// Clears the value of `newUserStatus`. Subsequent reads from it will return its default value.
  mutating func clearNewUserStatus() {self._newUserStatus = nil}

  /// new whether the user is a bot or not.
  var newIsBot: Bool {
    get {return _newIsBot ?? false}
    set {_newIsBot = newValue}
  }
  /// Returns true if `newIsBot` has been explicitly set.
  var hasNewIsBot: Bool {return self._newIsBot != nil}
  /// Clears the value of `newIsBot`. Subsequent reads from it will return its default value.
  mutating func clearNewIsBot() {self._newIsBot = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _newUserName: String? = nil
  fileprivate var _newUserAvatar: String? = nil
  fileprivate var _newUserStatus: Protocol_Profile_V1_UserStatus? = nil
  fileprivate var _newIsBot: Bool? = nil
}

/// Used in `UpdateProfile` endpoint.
struct Protocol_Profile_V1_UpdateProfileResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// Used in `GetAppData` endpoint.
struct Protocol_Profile_V1_GetAppDataRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// the app id.
  var appID: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// Used in `GetAppData` endpoint.
struct Protocol_Profile_V1_GetAppDataResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// the app data.
  var appData: Data = Data()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// Used in `SetAppData` endpoint.
struct Protocol_Profile_V1_SetAppDataRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// the app id.
  var appID: String = String()

  /// the app data.
  var appData: Data = Data()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// Used in `SetAppData` endpoint.
struct Protocol_Profile_V1_SetAppDataResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "protocol.profile.v1"

extension Protocol_Profile_V1_UserStatus: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "USER_STATUS_OFFLINE_UNSPECIFIED"),
    1: .same(proto: "USER_STATUS_ONLINE"),
    2: .same(proto: "USER_STATUS_IDLE"),
    3: .same(proto: "USER_STATUS_DO_NOT_DISTURB"),
    4: .same(proto: "USER_STATUS_MOBILE"),
    5: .same(proto: "USER_STATUS_STREAMING"),
  ]
}

extension Protocol_Profile_V1_Profile: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Profile"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "user_name"),
    2: .standard(proto: "user_avatar"),
    3: .standard(proto: "user_status"),
    4: .standard(proto: "is_bot"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.userName) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self._userAvatar) }()
      case 3: try { try decoder.decodeSingularEnumField(value: &self.userStatus) }()
      case 4: try { try decoder.decodeSingularBoolField(value: &self.isBot) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.userName.isEmpty {
      try visitor.visitSingularStringField(value: self.userName, fieldNumber: 1)
    }
    if let v = self._userAvatar {
      try visitor.visitSingularStringField(value: v, fieldNumber: 2)
    }
    if self.userStatus != .offlineUnspecified {
      try visitor.visitSingularEnumField(value: self.userStatus, fieldNumber: 3)
    }
    if self.isBot != false {
      try visitor.visitSingularBoolField(value: self.isBot, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Protocol_Profile_V1_Profile, rhs: Protocol_Profile_V1_Profile) -> Bool {
    if lhs.userName != rhs.userName {return false}
    if lhs._userAvatar != rhs._userAvatar {return false}
    if lhs.userStatus != rhs.userStatus {return false}
    if lhs.isBot != rhs.isBot {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Protocol_Profile_V1_GetProfileRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".GetProfileRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "user_id"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularUInt64Field(value: &self.userID) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.userID != 0 {
      try visitor.visitSingularUInt64Field(value: self.userID, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Protocol_Profile_V1_GetProfileRequest, rhs: Protocol_Profile_V1_GetProfileRequest) -> Bool {
    if lhs.userID != rhs.userID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Protocol_Profile_V1_GetProfileResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".GetProfileResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "profile"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._profile) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._profile {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Protocol_Profile_V1_GetProfileResponse, rhs: Protocol_Profile_V1_GetProfileResponse) -> Bool {
    if lhs._profile != rhs._profile {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Protocol_Profile_V1_UpdateProfileRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".UpdateProfileRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "new_user_name"),
    2: .standard(proto: "new_user_avatar"),
    3: .standard(proto: "new_user_status"),
    4: .standard(proto: "new_is_bot"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self._newUserName) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self._newUserAvatar) }()
      case 3: try { try decoder.decodeSingularEnumField(value: &self._newUserStatus) }()
      case 4: try { try decoder.decodeSingularBoolField(value: &self._newIsBot) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._newUserName {
      try visitor.visitSingularStringField(value: v, fieldNumber: 1)
    }
    if let v = self._newUserAvatar {
      try visitor.visitSingularStringField(value: v, fieldNumber: 2)
    }
    if let v = self._newUserStatus {
      try visitor.visitSingularEnumField(value: v, fieldNumber: 3)
    }
    if let v = self._newIsBot {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Protocol_Profile_V1_UpdateProfileRequest, rhs: Protocol_Profile_V1_UpdateProfileRequest) -> Bool {
    if lhs._newUserName != rhs._newUserName {return false}
    if lhs._newUserAvatar != rhs._newUserAvatar {return false}
    if lhs._newUserStatus != rhs._newUserStatus {return false}
    if lhs._newIsBot != rhs._newIsBot {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Protocol_Profile_V1_UpdateProfileResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".UpdateProfileResponse"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Protocol_Profile_V1_UpdateProfileResponse, rhs: Protocol_Profile_V1_UpdateProfileResponse) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Protocol_Profile_V1_GetAppDataRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".GetAppDataRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "app_id"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.appID) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.appID.isEmpty {
      try visitor.visitSingularStringField(value: self.appID, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Protocol_Profile_V1_GetAppDataRequest, rhs: Protocol_Profile_V1_GetAppDataRequest) -> Bool {
    if lhs.appID != rhs.appID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Protocol_Profile_V1_GetAppDataResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".GetAppDataResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "app_data"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularBytesField(value: &self.appData) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.appData.isEmpty {
      try visitor.visitSingularBytesField(value: self.appData, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Protocol_Profile_V1_GetAppDataResponse, rhs: Protocol_Profile_V1_GetAppDataResponse) -> Bool {
    if lhs.appData != rhs.appData {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Protocol_Profile_V1_SetAppDataRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".SetAppDataRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "app_id"),
    2: .standard(proto: "app_data"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.appID) }()
      case 2: try { try decoder.decodeSingularBytesField(value: &self.appData) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.appID.isEmpty {
      try visitor.visitSingularStringField(value: self.appID, fieldNumber: 1)
    }
    if !self.appData.isEmpty {
      try visitor.visitSingularBytesField(value: self.appData, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Protocol_Profile_V1_SetAppDataRequest, rhs: Protocol_Profile_V1_SetAppDataRequest) -> Bool {
    if lhs.appID != rhs.appID {return false}
    if lhs.appData != rhs.appData {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Protocol_Profile_V1_SetAppDataResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".SetAppDataResponse"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Protocol_Profile_V1_SetAppDataResponse, rhs: Protocol_Profile_V1_SetAppDataResponse) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
